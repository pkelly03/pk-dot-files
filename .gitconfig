[user]
    name = Paul Kelly
    email = pkelly03@gmail.com

[github]
    user = pkelly03

[core]
    editor = vim 
    pager = less -FXRS -x2
	commentchar = ";"

[alias]
    diff = diff --ignore-space-at-eol -b -w --ignore-blank-lines
    cnv = commit --no-verify
    co = checkout
    br = branch -v
    
	ll = log --pretty=format:"%C(yellow)%h%Cred%d\\ %Creset%s%Cblue\\ [%cn]" --decorate --numstat

    lc  = "!f() { git ll "$1"^.."$1"; }; f"

    # show a pretty log graph
    lg = log --graph --pretty=oneline --abbrev-commit --decorate
    
    # slight variation of pretty log graph
    ls = log --graph --pretty=format:'%Cred%h%Creset %an: %s - %Creset %C(yellow)%d%Creset %Cgreen(%cr)%Creset' --abbrev-commit --date=relative
    
    # show files that have changed between two branches (git dbr master..branch)
    dbr = diff --name-status

	#diff last commit
    dlc = diff --cached HEAD^

    # show diff of cached files
    dc = diff --cached
    
    # show changed files for a commit
    diff-files-today = show --pretty="format:" --name-only
    
    #list modified files in last commit
    dlast = "!git ll -1"

    files-changed = "!sh -c 'git ll --since=\"yesterday 10:00AM\" --author=\"`git config --get user.name`\"'"

    # difference to origin master
    diff-master = log --pretty=oneline --abbrev-commit origin/master..master
    diff-branch = !sh -c 'git log --pretty=oneline --abbrev-commit origin/master..$1'

    diff-rev  = "!f() { git diff "$1"^.."$1"; }; f"
	diff-rev-files  = "!f() { git diff --name-status "$1"^.."$1"; }; f"

    # show what I did today
    standup = "!sh -c 'git log --pretty=oneline --abbrev-commit --reverse --no-merges --branches=* --date=local --since=\"yesterday 10:00AM\" --author=\"`git config --get user.name`\"'"
    week = "!sh -c 'git log --pretty=oneline --abbrev-commit --reverse --no-merges --branches=* --since=\"1 week ago\" --author=\"`git config --get user.name`\"'"

    fixup = !sh -c 'git commit --fixup=$1' -
    squash = !sh -c 'git commit --squash=$1' -
    ri = rebase --interactive --autosquash


    # stash shortcuts
    sp = stash pop
    sw = stash save
    sl = stash list
    sh = show --pretty="format:" --name-only

    # show number of commits per contributer, sorted
    count = shortlog -sn

    undo = reset --soft HEAD~1
    amend = commit --amend -C HEAD

    cleanup = "!git remote prune origin && git gc && git clean -df && git stash clear"

    # rebase the current branch with changes from upstream remote
    update = !git fetch upstream && git rebase upstream/`git rev-parse --abbrev-ref HEAD`

    # grep commands

    # 'diff grep'
    dg = "!sh -c 'git ls-files -m | grep $1 | xargs git diff' -"
    # diff grep changes between two commits
    dgc = "!sh -c 'git ls-files | grep $1 | xargs git diff $2 $3 -- ' -"
    # 'checkout grep'
    cg = "!sh -c 'git ls-files -m | grep $1 | xargs git checkout ' -"
    # add grep
    ag = "!sh -c 'git ls-files -m -o --exclude-standard | grep $1 | xargs git add' -"
    # add all
    aa = !git ls-files -d | xargs git rm && git ls-files -m -o --exclude-standard | xargs git add
    # remove grep - Remove found files that are NOT under version control
    rg = "!sh -c 'git ls-files --others --exclude-standard | grep $1 | xargs rm' -"

    # grep on filename
    find = "!git ls-files | grep -i"

    # Branches
    done = "!f() { git branch | grep "$1" | cut -c 3- | grep -v done | xargs -I{} git branch -m {} done-{}; }; f"
    ours = "!f() { git co --ours $@ && git add $@; }; f"
    theirs = "!f() { git co --theirs $@ && git add $@; }; f"

    # Other useful aliases:
    unstage = reset HEAD
    staged = diff --cached
    unstaged = diff
    track = checkout -t
    ci = commit
    st = status
    br = branch
    b = branch

	#reset commands
    rh = reset --hard
    rh1 = reset HEAD@{0} --hard
    rh2 = reset HEAD^^ --hard

    head = !git l -1
    h = !git head
    hp = "!source ~/.githelpers && show_git_head"
    
    r = !git l -30
    ra = !git r --all
    
    l = "!source ~/.githelpers && pretty_git_log"

    # All your aliases
    la = "!git config -l | grep alias | cut -c 7-"

    # git changelog 0.4.5...0.5.3 using tags or tree-ish references
    whatchanged = log --pretty=oneline --no-merges
    # Packing files added in a changeset
    pack = !git show --pretty="format:" --name-only --diff-filter=A rev-sha -- | xargs zip -r0 rev-sha.zip
    who = shortlog -n -s --no-merges
    cleanup = !git remote prune origin && git gc && git clean -dfx && git stash clear
    rmb = !sh -c 'git branch -D $1 && git push origin :$1' -

    # http://stackoverflow.com/a/10693888/11543
    branch-by-date = for-each-ref --sort=-committerdate refs/heads/ --format='%(refname:short) %(committerdate:short) %(authorname)'

    # Ignore/unignore changes to files (like a local .gitignore)
    # http://durdn.com/blog/2012/11/22/must-have-git-aliases-advanced-examples/
    assume = update-index --assume-unchanged
    unassume = update-index --no-assume-unchanged
    assumed = "!git ls-files -v | grep ^h | cut -c 3-"
    unassumeall = "!git assumed | xargs git update-index --no-assume-unchanged"
    assumeall = "!git status -s | awk {'print $2'} | xargs git assume"

    # "git rev-parse" not completely correct; see the __gitdir alias in:
    # https://raw.github.com/git/git/master/contrib/completion/git-completion.bash
    updatehooks = !rm -rf $(git rev-parse --git-dir)/hooks && cp -a ~/git/templates/hooks $(git rev-parse --git-dir) && chmod +x $(git rev-parse --git-dir)/hooks/*

	jira = !sh -c 'git log --oneline $@ | egrep -o [A-Z]+-[0-9]+ | sort | uniq' -
	dsf = "!f() { [ -z \"$GIT_PREFIX\" ] || cd \"$GIT_PREFIX\" && git diff --color \"$@\" | diff-so-fancy  | less --tabs=4 -RFX; }; f"

[color]
    diff = auto
    status = auto
    branch = auto
    interactive = auto
    ui = auto

[color "branch"]
    current = green bold
    local = green
    remote = red bold

[color "diff"]
    meta = yellow bold
    frag = magenta bold
    old = red bold
    new = green bold

[color "status"]
    added = green bold
    changed = yellow bold
    untracked = red bold

[color "sh"]
    branch = yellow

[apply]
    # do not warn about missing whitespace at EOF
    whitespace = nowarn

[help]
    autocorrect = 1

[status]
    submodule = 1

[push]
    default = current

[pack]
    threads = 0

[credential]
    helper = osxkeychain

[rerere]
    enabled = true
[difftool "Kaleidoscope"]
	cmd = ksdiff --partial-changeset --relative-path \"$MERGED\" -- \"$LOCAL\" \"$REMOTE\"
[diff]
	tool = Kaleidoscope
[difftool]
	prompt = false
[mergetool "Kaleidoscope"]
	cmd = ksdiff --merge --output \"$MERGED\" --base \"$BASE\" -- \"$LOCAL\" --snapshot \"$REMOTE\" --snapshot
	trustExitCode = true
[mergetool]
	prompt = false
[merge]
	tool = Kaleidoscope
[color "diff-highlight"]
	oldNormal = red bold
	oldHighlight = red bold 52
	newNormal = green bold
	newHighlight = green bold 22
