# Create a new directory and enter it
function mkd() {
	mkdir -p "$@" && cd "$@"
}

# Ports
function whatpid {
	lsof -i tcp:$@
}

setTerminalText () {
    # echo works in bash & zsh
    local mode=$1 ; shift
    echo -ne "\033]$mode;$@\007"
}

stt_both  () { setTerminalText 0 $@; }

function copy-hooks() {
  echo "\n>>>> Copying hook to dcj\n"
  cp ~/bin/commit-msg /Users/paulkelly/repos/homeoffice-cjp/.git/hooks

  echo "\n>>>> Copying hook to catalogue\n"
  cp ~/bin/commit-msg /Users/paulkelly/repos/dcj-product-catalogue/.git/hooks
  
  echo "\n>>>> Copying hook to Infra\n"
  cp ~/bin/commit-msg /Users/paulkelly/repos/dcj-infra/.git/hooks

  echo "\n>>>> Copying hook to E2E\n"
  cp ~/bin/commit-msg /Users/paulkelly/repos/dcj-end-to-end-tests/.git/hooks
}

function status() {
  
  echo "\n>>>>> Product Catalogue - Status\n"
  catalogue && gst
  echo "\n"

  echo "\n>>>>> DCJ - Status\n"
  dcj && gst
  echo "\n"


  echo "\n>>>>> Payments - Status\n"
  payments && gst
  echo "\n"

  echo "\n>>>>> Infra - Status\n"
  infra && gst
  echo "\n"

  echo "\n>>>>> E2E - Status\n"
  e2e && gst
  echo "\n"

}

function build-core() {
  echo "\n>>>> Building core\n"
  core && ./sbt clean && ./build.sh
}

function pull() {
  echo "\n>>>>> Product Catalogue\n"
  catalogue && git pull --rebase
  echo "\n"
  
  echo "\n>>>>> DCJ\n"
  dcj && git pull --rebase
  echo "\n"

  echo "\n>>>>> Payments \n"
  payments && git pull --rebase
  echo "\n"

  echo "\n>>>>> Infra\n"
  infra && git pull --rebase
  echo "\n"

  echo "\n>>>>> E2E\n"
  e2e && git pull --rebase
  echo "\n"
}

function stash() {

  echo "\n>>>>> Product Catalogue - Start"
  catalogue && git stash
  echo "\n>>>>> Product Catalogue - finish"
  
  echo "\n>>>>> DCJ - Start"
  dcj && git stash
  echo "\n>>>>> DCJ - finish"

  echo "\n>>>>> Infra - Start"
  infra && git stash
  echo "\n>>>>> Infra - finish"

  echo "\n>>>>> E2E - Start"
  catalogue && git stash
  echo "\n>>>>> E2E - finish"

}


function unstash() {

  echo "\n>>>>> Product Catalogue - Start"
  catalogue && git stash apply
  echo "\n>>>>> Product Catalogue - finish"
  
  echo "\n>>>>> DCJ - Start"
  dcj && git stash apply
  echo "\n>>>>> DCJ - finish"

  echo "\n>>>>> Infra - Start"
  infra && git stash apply
  echo "\n>>>>> Infra - finish"

  echo "\n>>>>> E2E - Start"
  catalogue && git stash apply
  echo "\n>>>>> E2E - finish"

}

function setup-tooling() {
  start
  mailcatcher
  /usr/local/bin/mongod & tail -f /usr/local/var/log/mongodb/mongo.log
  t "Mongo"
}

function start-application() {
  application
  echo "updating db.."
  ..
  ./updatedb.sh
  cd -
  t "App:3010"
  ./run.sh
}

function start-admin() {
  admin
  t "Admin:9000"
  ./run.sh
}

function start-customer() {
  customer
  t Cust:3010
  ./run.sh
}

function start-catalogue() {
  catalogue
  echo "updating catalogue db.."
  ./updatedb.sh
  t "Cata:3000"
  ./run.sh
}

function start-submission() {
  submission
  echo "updating submission db.."
  ./updatedb.sh
  t "Subm:3020"
  ./run.sh
}

function start-pva() {
  pva
  t "PVA:9030"
  ./run.sh
}

function start-proviso() {
  proviso
  t "Prov:3021"
  ./run.sh
}

function start-worldpay() {
  worldpay
  t "WPay:3021"
  ./run.sh
}

function update-sponsors() {
  dcj
  ./updateSponsors.sh
}

function start() {
	echo 'tab 1. start-application'	
	echo 'tab 2. start-customer'	
	echo 'tab 3. start-admin'	
	echo 'tab 4. start-catalogue'
	echo 'tab 5. start-submission'
	echo 'tab 6. start-pva'	
	echo 'tab 7. start-proviso'	
	echo 'tab 8. start-worldpay'	
	echo 'tab 9. update-sponsors'	
}

function setjdk() {  
  if [ $# -ne 0 ]; then  
     removeFromPath '/System/Library/Frameworks/JavaVM.framework/Home/bin'  
	  if [ -n "${JAVA_HOME+x}" ]; then  
	     removeFromPath $JAVA_HOME  
	  fi  
      export JAVA_HOME=`/usr/libexec/java_home -v $@`  
      export PATH=$JAVA_HOME/bin:$PATH  
  fi  
}  

function removeFromPath() {  
	export PATH=$(echo $PATH | sed -E -e "s;:$1;;" -e "s;$1:?;;")  
}
                            
# find shorthand
function f() {
    find . -name "$1"
}

# cd into whatever is the forefront Finder window.
cdf() {  # short for cdfinder
  cd "`osascript -e 'tell app "Finder" to POSIX path of (insertion location as alias)'`"
}


# lets toss an image onto my server and pbcopy that bitch.
function scpp() {
    scp "$1" aurgasm@aurgasm.us:~/paulirish.com/i;
    echo "http://paulirish.com/i/$1" | pbcopy;
    echo "Copied to clipboard: http://paulirish.com/i/$1"
}

# Start an HTTP server from a directory, optionally specifying the port
function server() {
	local port="${1:-8000}"
	open "http://localhost:${port}/"
	# Set the default Content-Type to `text/plain` instead of `application/octet-stream`
	# And serve everything as UTF-8 (although not technically correct, this doesnâ€™t break anything for binary files)
	python -c $'import SimpleHTTPServer;\nmap = SimpleHTTPServer.SimpleHTTPRequestHandler.extensions_map;\nmap[""] = "text/plain";\nfor key, value in map.items():\n\tmap[key] = value + ";charset=UTF-8";\nSimpleHTTPServer.test();' "$port"
}


# Copy w/ progress
cp_p () {
  rsync -WavP --human-readable --progress $1 $2
}


# Test if HTTP compression (RFC 2616 + SDCH) is enabled for a given URL.
# Send a fake UA string for sites that sniff it instead of using the Accept-Encoding header. (Looking at you, ajax.googleapis.com!)
function httpcompression() {
	encoding="$(curl -LIs -H 'User-Agent: Mozilla/5 Gecko' -H 'Accept-Encoding: gzip,deflate,compress,sdch' "$1" | grep '^Content-Encoding:')" && echo "$1 is encoded using ${encoding#* }" || echo "$1 is not using any encoding"
}

# Syntax-highlight JSON strings or files
function json() {
	if [ -p /dev/stdin ]; then
		# piping, e.g. `echo '{"foo":42}' | json`
		python -mjson.tool | pygmentize -l javascript
	else
		# e.g. `json '{"foo":42}'`
		python -mjson.tool <<< "$*" | pygmentize -l javascript
	fi
}


# take this repo and copy it to somewhere else minus the .git stuff.
function gitexport(){
	mkdir -p "$1"
	git archive master | tar -x -C "$1"
}



# get gzipped size
function gz() {
	echo "orig size    (bytes): "
	cat "$1" | wc -c
	echo "gzipped size (bytes): "
	gzip -c "$1" | wc -c
}

# All the dig info
function digga() {
	dig +nocmd "$1" any +multiline +noall +answer
}

# Escape UTF-8 characters into their 3-byte format
function escape() {
	printf "\\\x%s" $(printf "$@" | xxd -p -c1 -u)
	echo # newline
}

# Decode \x{ABCD}-style Unicode escape sequences
function unidecode() {
	perl -e "binmode(STDOUT, ':utf8'); print \"$@\""
	echo # newline
}

# Extract archives - use: extract <file>
# Credits to http://dotfiles.org/~pseup/.bashrc
function extract() {
	if [ -f $1 ] ; then
		case $1 in
			*.tar.bz2) tar xjf $1 ;;
			*.tar.gz) tar xzf $1 ;;
			*.bz2) bunzip2 $1 ;;
			*.rar) rar x $1 ;;
			*.gz) gunzip $1 ;;
			*.tar) tar xf $1 ;;
			*.tbz2) tar xjf $1 ;;
			*.tgz) tar xzf $1 ;;
			*.zip) unzip $1 ;;
			*.Z) uncompress $1 ;;
			*.7z) 7z x $1 ;;
			*) echo "'$1' cannot be extracted via extract()" ;;
		esac
	else
		echo "'$1' is not a valid file"
	fi
}


# animated gifs from any video
# from alex sexton   gist.github.com/SlexAxton/4989674
gifify() {
  if [[ -n "$1" ]]; then
    if [[ $2 == '--good' ]]; then
      ffmpeg -i $1 -r 10 -vcodec png out-static-%05d.png
      time convert -verbose +dither -layers Optimize -resize 600x600\> out-static*.png  GIF:- | gifsicle --colors 128 --delay=5 --loop --optimize=3 --multifile - > $1.gif
      rm out-static*.png
    else
      ffmpeg -i $1 -s 600x400 -pix_fmt rgb24 -r 10 -f gif - | gifsicle --optimize=3 --delay=3 > $1.gif
    fi
  else
    echo "proper usage: gifify <input_movie.mov>. You DO need to include extension."
  fi
}

