#!/bin/bash

functions run-integration-test() {
  echo '#################'
  echo 'Runninng Integration test:' "$@"
  echo '#################'
  task integration-test:plain -- "$@"
}

functions leadflo-seed() {
  cd ~/
  j leadflo
  echo '#################'
  echo 'Generating schema'
  echo '#################'
  docker-compose exec api bash -c "php artisan migrate --seed"
  echo '#################'
  echo 'Generating client'
  echo '#################'
  docker-compose exec api bash -c "php artisan test:seed --client-id=1"
  echo '#################'
  echo 'Generating automations'
  echo '#################'
  docker-compose exec api bash -c "php artisan automations:create-campaign 1"

}


function old-docker-cleanup(){
  # stop all running containers
  echo '####################################################'
  echo 'Stopping running containers (if available)...'
  echo '####################################################'
  docker stop $(docker ps -aq)

  # remove all stopped containers
  echo '####################################################'
  echo 'Removing containers ..'
  echo '####################################################'
  docker rm $(docker ps -aq)


  # remove all images
  echo '####################################################'
  echo 'Removing images ...'
  echo '####################################################'
  docker rmi $(docker images -q)

  # remove all stray volumes if any
  echo '####################################################'
  echo 'Revoming docker container volumes (if any)'
  echo '####################################################'
  docker volume rm $(docker volume ls -q)

}

function docker-cleanup-nuclear() {

  # remove all stray volumes if any
  echo '####################################################'
  echo 'Nuclear'
  echo '####################################################'
  docker rm -vf $(docker ps -a -q) 2>/dev/null || echo "No more containers to remove."
  docker rmi $(docker images -q) 2>/dev/null || echo "No more images to remove."

}

function docker-cleanup-stopped() {

  # remove all stray volumes if any
  echo '####################################################'
  echo 'Stopped'
  echo '####################################################'
  docker rm -vf $(docker ps -a | grep "Exited" | awk '{print $1}') 2>/dev/null || echo "No stopped containers to remove."

}

function docker-cleanup-purge() {

  # remove all stray volumes if any
  echo '####################################################'
  echo 'Stopped'
  echo '####################################################'
  # Attempt to remove running containers that are using the images we're trying to purge first.
  (docker rm -vf $(docker ps -a | grep "$2/\|/$2 \| $2 \|:$2\|$2-\|$2:\|$2_" | awk '{print $1}') 2>/dev/null || echo "No containers using the \"$2\" image, continuing purge.") &&\
  # Remove all images matching arg given after "--purge"
  docker rmi $(docker images | grep "$2/\|/$2 \| $2 \|$2 \|$2-\|$2_" | awk '{print $3}') 2>/dev/null || echo "No images matching \"$2\" to purge."

}

function docker-bash-api() {
  cd ~/
  j leadflo
  docker-compose exec api bash
}

function docker-stop-all() {
  cd ~/
  j leadflo
  docker stop $(docker ps -a -q)
}

function docker-bash() {
  cd ~/
  j leadflo
  docker exec -it "$@" bash
}

function start-dev-services() {
  cd ~/
  j leadflo && docker-compose -f docker-compose.yml up
}

function rebuild-dev-services() {
  cd ~/
  j leadflo && docker-compose -f docker-compose.yml build
}


function start-test-services() {
  cd ~/
  j leadflo && docker-compose -f docker-compose.test.yml up
}

function docker-container-names() {
    docker ps -a --format "{{.Names}}" | xargs
}

# Get the IP address of a particular container
function dip() {
    local network
    network='YOUR-NETWORK-HERE'
    docker inspect --format '{{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}' "$@"
}

function dipall() {
    for container_name in $(docker-container-names);
    do
        local container_ip=$(dip $container_name)
        if [[ -n "$container_ip" ]]; then
            echo $(dip $container_name) " $container_name"
        fi
    done | sort -t . -k 3,3n -k 4,4n
}


function docker-ip() {
  echo "Finding IP address for docker container: " + $1
  docker inspect --format '{{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}' "$@"
}
function mc() {
  mcfly search $1
}

function thefresh_17() {
  sdk use java 17.0.4-oracle
  jenv global oracle64-17.0.4 
  jenv doctor
}

function leadflow_11() {
  sdk use java 11.0.15.1-librca
  jenv global 11.0.15.1
  jenv doctor
}

function rv() {
  echo "Running rover on schema " + $1
  cd /Users/pakelly/code/sstk/shutterstock-service-homer/src/main/resources/schema
  rover graph check Gateway-0b4zi@dev --schema ./schema.graphqls
}

function media-id() {
  echo "converting mason id " + $1
  cd /Users/pakelly/code/sstk/media-id
  ./node_modules/.bin/media-id encode sstk.submittedPhotos $1
  cd -
}

function media-id-list() {
  echo "converting mason id " + $1
  cd /Users/pakelly/code/sstk/media-id
  ./node_modules/.bin/media-id list
  cd -
}

function list-topics() {
  local server_port="${1:-localhost:9092}"
  cd $KAFKA_HOME
  ./bin/kafka-topics.sh --bootstrap-server $server_port --list --exclude-internal
}

function list-consumer-groups() {
  local server_port="${1:-localhost:9092}"

  cd $KAFKA_HOME

  ./bin/kafka-consumer-groups.sh --bootstrap-server $server_port --list
}



function produce-message() {
  cd $KAFKA_HOME
  ./bin/kafka-console-producer.sh --broker-list localhost:9092 --topic $1 --property "parse.key=true" --property "key.separator=:"
}
function create-topic() {
  cd $KAFKA_HOME
  ./bin/kafka-topics.sh --bootstrap-server localhost:9092 --create --partitions 3 --replication-factor 1 --topic $1
}

function kafdrop() {
  local server_port="${1:-localhost:9092}"
  echo "starts on http://localhost:9000/"
  java -jar /Users/pakelly/tools/kafdrop-3.29/kafdrop-3.29.0.jar --kafka.brokerConnect=$server_port
}

function sonar-indexer() {
 mvn clean verify sonar:sonar \
  -Dsonar.projectKey=Indexer \
  -Dsonar.host.url=http://localhost:9000 \
  -Dsonar.login=710ae5270dbab3cfcde288fd5e57660d7b124c18
  -Dspring.profiles.active=dev,ephemeral,integration-test \
  -Dsonar.language=java \
  -Dsonar.sources=src/main/java \
  -Dsonar.tests=src/test/java,src/it/java \
  -Dsonar.java.binaries=target/classes/com/shutterstock \
  -Dsonar.coverage.jacoco.xmlReportPaths=target/site/jacoco-all/jacoco.xml
}

function deep_work() {
curl -d '{\"profile\": { \"status_text\": \"Deep work\", \"timeout\": 0 }}' -H \"Content-Type: application/json\" -H \"Authorization: Bearer SLACK_API_TOKEN\" -X POST https://slack.com/api/users.profile.set
}



function clean-jupyter() {
  nbstripout $1
}

function fixtures() {
 cp /Users/pakelly/code/shutterstock/indexing-aggregator/src/it/resources/fixture/reindex_one_component/*.json /Users/pakelly/code/shutterstock/indexing-aggregator/target/test-classes/fixture/reindex_one_component/
}

# Create a new directory and enter it
function search() {
  ag -G $1 $2
}

function parquet() {
  parquet-tools cat $1 > parquet_output.md
}

function md() {
	mkdir -p "$@" && cd "$@"
}

function mvnhomer() {
  cd ~/code/shutterstock-service-homer
  mvn -s search-java-build-tools/maven-settings.xml -Dmaven.artifact.threads=10 -Dspring.profiles.active=dev,local -Dconfig.resource=kafka-dev.conf -Dskip.repack=true verify 
}

# Ports
function whatpid {
	lsof -i tcp:$@
}

# find shorthand
function f() {
	find . -name "$1" 2>&1 | grep -v 'Permission denied'
}

# List all files, long format, colorized, permissions in octal
function la(){
 	ls -l  "$@" | awk '
    {
      k=0;
      for (i=0;i<=8;i++)
        k+=((substr($1,i+2,1)~/[rwx]/) *2^(8-i));
      if (k)
        printf("%0o ",k);
      printf(" %9s  %3s %2s %5s  %6s  %s %s %s\n", $3, $6, $7, $8, $5, $9,$10, $11);
    }'
}

# cd into whatever is the forefront Finder window.
cdf() {  # short for cdfinder
  cd "`osascript -e 'tell app "Finder" to POSIX path of (insertion location as alias)'`"
}



# git commit browser. needs fzf
log() {
  git log --graph --color=always \
      --format="%C(auto)%h%d %s %C(black)%C(bold)%cr" "$@" |
  fzf --ansi --no-sort --reverse --tiebreak=index --toggle-sort=\` \
      --bind "ctrl-m:execute:
                echo '{}' | grep -o '[a-f0-9]\{7\}' | head -1 |
                xargs -I % sh -c 'git show --color=always % | less -R'"
}



# Start an HTTP server from a directory, optionally specifying the port
function server() {
	local port="${1:-8000}"
	open "http://localhost:${port}/" &
 	# statikk is good because it won't expose hidden folders/files by default.
 	yarn global add statikk
 	statikk --port "$port" .
}


# Copy w/ progress
cp_p () {
  rsync -WavP --human-readable --progress $1 $2
}

function localip(){
	function _localip(){ echo "ðŸ“¶  "$(ipconfig getifaddr "$1"); }
	export -f _localip
	local purple="\x1B\[35m" reset="\x1B\[m"
	networksetup -listallhardwareports | \
		sed -r "s/Hardware Port: (.*)/${purple}\1${reset}/g" | \
		sed -r "s/Device: (en.*)$/_localip \1/e" | \
		sed -r "s/Ethernet Address:/ðŸ“˜ /g" | \
		sed -r "s/(VLAN Configurations)|==*//g"
}

# preview csv files. source: http://stackoverflow.com/questions/1875305/command-line-csv-viewer
function csvpreview(){
      sed 's/,,/, ,/g;s/,,/, ,/g' "$@" | column -s, -t | less -#2 -N -S
}

function solr-start() {
 cd /Users/pakelly/tools/solr-7.7.3/bin
 ./solr start
}


function solr-stop() {
 cd /Users/pakelly/tools/solr-7.7.3/bin
 ./solr stop
}
